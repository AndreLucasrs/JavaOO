package br.com.alura.curso.java8;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

public class ExemploCursoStream {

	public static void main(String[] args) {
		
		List<Curso> cursos = new ArrayList<Curso>();
		cursos.add(new Curso("Python", 45));
		cursos.add(new Curso("JavaScript", 150));
		cursos.add(new Curso("Java 8", 113));
		cursos.add(new Curso("C", 55));
		
		cursos.sort(Comparator.comparingInt(Curso::getAlunos));
		
		int sum = cursos.stream().filter(c -> c.getAlunos() >= 100).mapToInt(Curso::getAlunos).sum();
		
		System.out.println(sum);
		//Optional é uma importante nova classe do Java 8.
		//É com ele que poderemos trabalhar de uma maneira mais organizada com possíveis valores null.
		//Em vez de ficar comparando if(algumaCoisa == null), o Optional já fornece uma série de métodos para nos ajudar nessas situações.
//		Optional<Curso> optionalCurso = cursos.stream().filter(c -> c.getAlunos() >= 100)
//			.findAny();
		
		//O orElse diz que ele deve devolver o curso que existe dentro desse optional, ou então o que foi passado como argumento
		//Curso curso = optionalCurso.orElse(null);
		//Mesmo assim, ainda não está tão interessante
		// Há como evitar tanto o null, quanto as exceptions, quanto os ifs
		//O método ifPresent executa um lambda (um Consumer) no caso de existir um curso dentro daquele optional
		//optionalCurso.ifPresent(c -> System.out.println(c.getNome()));
		//Dado um Optional, podemos pegar seu conteúdo invocando o get. Ele vai devolver o Curso que queremos. Mas e se não houver nenhum? Uma exception será lançada.
		//Curso curso2 = optionalCurso.get();
		//System.out.println(curso.getNome());

	}

}
